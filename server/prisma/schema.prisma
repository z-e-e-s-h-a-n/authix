generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserScope {
  platform
  project
}

enum UserRole {
  admin
  owner
  member
}

enum OtpType {
  token
  otp
}

enum OtpPurpose {
  signup
  login
  resetPassword
  verifyEmail
  verifyPhone
}

model User {
  id              String    @id @default(cuid())
  scope           UserScope @default(project)
  email           String?   @unique
  phone           String?   @unique
  username        String?   @unique
  password        String?
  firstName       String?
  lastName        String?
  isEmailVerified Boolean   @default(false)
  isPhoneVerified Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  memberships   Membership[]
  ownedOrgs     Organization[] @relation("OrgOwner")
  ownedProjects Project[]      @relation("ProjectOwner")
  refreshTokens RefreshToken[]
  otpSessions   OtpSession[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner    User         @relation("OrgOwner", fields: [ownerId], references: [id])
  members  Membership[]
  projects Project[]
}

model Project {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  ownerId   String
  orgId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner        User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  organization Organization    @relation(fields: [orgId], references: [id])
  members      Membership[]
  settings     ProjectSetting?
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  orgId     String?
  projectId String?
  role      UserRole @default(member)
  createdAt DateTime @default(now())

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [orgId], references: [id])
  project      Project?      @relation(fields: [projectId], references: [id])

  @@unique([userId, orgId])
  @@unique([userId, projectId])
}

model ProjectSetting {
  id            String   @id @default(cuid())
  projectId     String   @unique
  signInOptions Json
  jwtConfig     Json
  mfaEnabled    Boolean  @default(false)
  createdAt     DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id])
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  ip          String
  userAgent   String
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  blacklisted Boolean  @default(false)
}

model OtpSession {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  type      OtpType
  purpose   OtpPurpose
  secret    String
  expireAt  DateTime   @default(dbgenerated("now() + interval '10 minutes'"))
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
