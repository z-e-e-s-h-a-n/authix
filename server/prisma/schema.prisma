generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

enum UserRole {
  owner
  admin
  member
}

enum OtpPurpose {
  signup
  login
  resetPassword
  verifyEmail
  verifyPhone
  mfa
}

enum AuditAction {
  login
  logout
  updateProfile
  createProject
  deleteProject
  inviteUser
  removeUser
  // Extend as needed
}

model User {
  id              String   @id @default(ulid())
  email           String?  @unique
  phone           String?  @unique
  username        String?  @unique
  password        String?
  firstName       String
  lastName        String?
  isEmailVerified Boolean  @default(false)
  isPhoneVerified Boolean  @default(false)
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  memberships   Membership[]
  refreshTokens RefreshToken[]
  otps          Otp[]
  auditLogs     AuditLog[]
  Organization  Organization[]

  @@index([email])
  @@index([phone])
  @@index([username])
}

model Organization {
  id        String   @id @default(ulid())
  name      String
  slug      String   @unique
  metadata  Json?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members   Membership[]
  projects  Project[]
  auditLogs AuditLog[]
  User      User[]

  @@index([slug])
}

model Project {
  id        String   @id @default(ulid())
  name      String
  slug      String   @unique
  orgId     String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization    @relation(fields: [orgId], references: [id])
  members        Membership[]
  settings       ProjectSetting?
  apiKeys        ApiKey[]
  oauthProviders OAuthProvider[]
  auditLogs      AuditLog[]

  @@index([orgId])
}

model Membership {
  id        String   @id @default(ulid())
  userId    String
  orgId     String?
  projectId String?
  role      UserRole @default(member)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [orgId], references: [id])
  project      Project?      @relation(fields: [projectId], references: [id])

  @@unique([userId, orgId])
  @@unique([userId, projectId])
  @@index([userId])
  @@index([orgId])
  @@index([projectId])
}

model ProjectSetting {
  id               String   @id @default(ulid())
  projectId        String   @unique
  allowedProviders String[]
  jwtTemplate      String?
  mfaEnabled       Boolean  @default(false)
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
}

model RefreshToken {
  id          String   @id @default(ulid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  ip          String
  userAgent   String
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  blacklisted Boolean  @default(false)

  @@index([userId])
}

model Otp {
  id        String     @id @default(ulid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  purpose   OtpPurpose
  secret    String
  attempts  Int        @default(0)
  expireAt  DateTime   @default(dbgenerated("now() + interval '10 minutes'"))
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model ApiKey {
  id        String    @id @default(ulid())
  key       String    @unique
  prefix    String
  projectId String
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  project   Project   @relation(fields: [projectId], references: [id])
}

model OAuthProvider {
  id           String   @id @default(ulid())
  projectId    String
  provider     String
  clientId     String   @unique
  clientSecret String
  redirectUris String[]
  scopes       String[]
  project      Project  @relation(fields: [projectId], references: [id])
}

model AuditLog {
  id        String      @id @default(ulid())
  userId    String?
  orgId     String?
  projectId String?
  action    AuditAction
  metadata  Json?
  createdAt DateTime    @default(now())

  user         User?         @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [orgId], references: [id])
  project      Project?      @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([orgId])
  @@index([projectId])
}
